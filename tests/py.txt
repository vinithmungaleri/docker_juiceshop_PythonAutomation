from selenium import webdriver
import pytest
from selenium.webdriver import ActionChains
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import json
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait

@pytest.fixture(scope='module')
def setup():
    global base_url, login_url, login_email_value, login_pwd_value
    try:
        with open('../config.json', 'r') as json_file:
            config_data = json.load(json_file)

        base_url = config_data['base_url']
        login_url = config_data['login_url']
        login_email_value = config_data['login']['email']
        login_pwd_value = config_data['login']['password']

    except Exception as e:
        print("Exception occurred trying to access Config JSON file:", str(e))

    options = Options()
    options.add_argument('--start-maximized')
    driver = webdriver.Chrome(options=options)
    wait = WebDriverWait(driver, 10)
    driver.get(base_url)

    dismiss_container_btn = wait.until(EC.visibility_of_element_located((By.XPATH, "//button[contains(@class, 'close-dialog')]")))
    dismiss_container_btn.click()
    nav_account = driver.find_element(By.ID, "navbarAccount")
    nav_account.click()
    nav_login_btn = wait.until(EC.element_to_be_clickable((By.ID, "navbarLoginButton")))
    nav_login_btn.click()
    assert driver.current_url == login_url
    assert driver.find_element(By.XPATH, "//h1[text() = 'Login']").text == 'Login'
    login_email = driver.find_element(By.ID, 'email')
    login_email.send_keys(login_email_value)
    login_pwd = driver.find_element(By.ID, 'password')
    login_pwd.send_keys(login_pwd_value)
    login_btn = wait.until(EC.element_to_be_clickable((By.ID, 'loginButton')))
    driver.get_screenshot_as_file('login screenshot.png')
    login_btn.click()
    nav_account = wait.until(EC.presence_of_element_located((By.ID, 'navbarAccount')))
    nav_account.click()

    logout_btn = wait.until(EC.presence_of_element_located((By.ID, 'navbarLogoutButton')))
    assert logout_btn.is_displayed()
    yield driver
    driver.quit()


def test_add_card_details(setup):
    driver = setup
    wait = WebDriverWait(driver, 10)
    current_url = driver.current_url
    print(current_url)
    nav_account = wait.until(EC.element_to_be_clickable((By.ID, 'navbarAccount')))
    nav_account.click()
    actions = ActionChains(driver)
    drop_dwn_orders_n_payments = driver.find_element(By.XPATH, "//button[@aria-label='Show Orders and Payment Menu']")
    actions.move_to_element(drop_dwn_orders_n_payments).perform()
    my_payment_options_btn = wait.until(EC.presence_of_element_located(By.XPATH, "//button[@aria-label='Go to saved payment methods page']"))
    my_payment_options_btn.click()
    assert driver.current_url == "http://localhost:3000/#/saved-payment-methods"
    driver.find_element(By.XPATH, "//mat-expansion-panel").click()
    card_fields = wait.until(EC.presence_of_element_located((By.XPATH, "//mat-expansion-panel//mat-form-field")))
    card_fields = driver.find_elements(By.XPATH, "//mat-expansion-panel//mat-form-field")
    print(len(card_fields))

